A -> with ada.text_io; use ada.text_io; procedure V is B* begin I+ end V? ;

B -> type V C;| E | F
C ->  is D | .
D ->  access V | record P+ end record;

E -> procedure V R? is B* begin I+ end V?;

F -> function V R? return Q is B* begin I+ end V?;

G ->  X | W | true | false | null | U | H | new V
H -> GTG | not G | -G | V (GY) | character ' val (G)

Y -> ,G | .

I -> U := G; | return G? ; | V J; | K | L | N | O

J -> (G+,) | .

K -> begin I+ end;

L -> if G then I+ M

M -> elsif G then I+ M | (else I+)? end if;

N -> for V in reverse? G...G loop I+ end loop;

O -> while G loop I+ end loop;

P -> V+, : Q;
Q -> V | access V
R -> (SZ)
Z -> ;SZ | .

S -> V+, : Q | V+, : in Q | V+, : in out Q

T -> = | /= | < | <= | > | >= | + | - | * | / | rem | and | and then | or | or else

U -> V | G.V

V -> W | WA'
A' -> XA' | WA' | _A' | .

# W  = char  et X = int
W -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
X -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9