FICHIER ->	with ada point textio pointvirgule use ada point textio pointvirgule procedure IDENT is DECLETOILE begin INSTRPLUS end IDENTINTER pointvirgule .
DECL ->	type IDENT pointvirgule
|	PROCEDURE
|	FUNC .
DECLETOILE ->	DECL DECLETOILE2
|	.
DECLETOILE2 ->	DECL DECLETOILE2
|	.

PROCEDURE ->	procedure IDENT is PARAMSINTER DECLETOILE begin INSTRPLUS end IDENTINTER pointvirgule .
FUNC ->	function IDENT return PARAMSINTER TYPE is DECLETOILE begin INSTRPLUS end IDENTINTER pointvirgule .
EXPR ->	TERM2 .
OPTERMETOILE ->	OP TERM1
|	.
OPTERMETOILE2 ->	OP TERM1
|	.

TERM1 ->	int OPTERMETOILE2
|	caractere OPTERMETOILE2
|	true OPTERMETOILE2
|	false OPTERMETOILE2
|	null OPTERMETOILE2
|	not EXPR3
|	moins EXPR3
|	IDENT ( EXPR ) VIRGULEEXPRETOILE2
|	caractere val EXPR3
|	new IDENT OPTERMETOILE2 .
TERM2 ->	int OPTERMETOILE
|	caractere OPTERMETOILE
|	true OPTERMETOILE
|	false OPTERMETOILE
|	null OPTERMETOILE
|	not EXPR2
|	moins EXPR2
|	IDENT ( EXPR ) VIRGULEEXPRETOILE1
|	caractere val EXPR2
|	new IDENT OPTERMETOILE .

VIRGULEEXPRETOILE2 ->	virgule EXPR1
|	.
INSTR ->	ACCES deuxpointsegal EXPR pointvirgule
|	return EXPRINTER pointvirgule
|	IDENT pointvirgule EXPRPARENTHETOILE
|	BEGIN
|	IF
|	FOR
|	WHILE .
EXPRINTER ->	EXPR
|	.
EXPRPARENTHETOILE ->	( EXPR ) EXPRPARENTHETOILE2
|	.
EXPRPARENTHETOILE2 ->	( EXPR ) EXPRPARENTHETOILE2
|	.
INSTRPLUS ->	INSTR INSTRPLUS2 .
INSTRPLUS2 ->	INSTR INSTRPLUS2
|	.
BEGIN ->	begin INSTRPLUS end .
IF ->	if EXPR then INSTRPLUS IF_TAIL .
IF_TAIL ->	elsif EXPR then INSTRPLUS IF_TAIL
|	INSTRPLUSELSEINTER end if .
INSTRPLUSELSEINTER ->	else INSTRPLUS
|	.
FOR ->	for IDENT in REVERSEINTER EXPR troispoints EXPR loop INSTRPLUS end loop pointvirgule .
REVERSE ->	reverse .
REVERSEINTER ->	REVERSE
|	.
WHILE ->	while EXPR loop INSTRPLUS end loop .

IDENTVIRGULEETOILE ->	virgule IDENT IDENTVIRGULEETOILE2
|	.
IDENTVIRGULEETOILE2 ->	vigule IDENT IDENTVIRGULEETOILE2
|	.

TYPE ->	IDENT
|	access IDENT .
PARAMS ->	( PARAM ) PARAMVIRGULEETOILE .
PARAMVIRGULEETOILE ->	virgule PARAM PARAMVIRGULEETOILE2
|	.
PARAMVIRGULEETOILE2 ->	virgule PARAM VIRGULEEXPRETOILE2
|	.
PARAMSINTER ->	PARAMS
|	.
PARAM ->	IDENT : IDENTVIRGULEETOILE MODEINTER TYPE .
MODEINTER ->	MODE
|	.
MODE ->	in
|	in out .
OP ->	equal
|	different
|	inferior
|	inferioregal
|	superior
|	superioregal
|	plus
|	moins
|	mult
|	division
|	rem
|	and
|	and then
|	or
|	or else .
ACCES ->	IDENT
|	EXPR point IDENT .
IDENT ->	ident .
IDENTINTER ->	IDENT
|	.
EXPR1 ->	TERM24 .
EXPR2 ->	TERM23 .
VIRGULEEXPRETOILE1 ->	virgule EXPR6
|	OPTERMETOILE .
EXPR3 ->	TERM22 .
VIRGULEEXPRETOILE2 ->	virgule EXPR5
|	OPTERMETOILE2 .


EXPR5 ->	TERM24 OPTERMETOILE2 .
TERM22 ->	int OPTERMETOILE OPTERMETOILE2
|	caractere OPTERMETOILE OPTERMETOILE2
|	true OPTERMETOILE OPTERMETOILE2
|	false OPTERMETOILE OPTERMETOILE2
|	null OPTERMETOILE OPTERMETOILE2
|	not EXPR2 OPTERMETOILE2
|	moins EXPR2 OPTERMETOILE2
|	IDENT ( EXPR ) VIRGULEEXPRETOILE1 OPTERMETOILE2
|	caractere val EXPR2 OPTERMETOILE2
|	new IDENT OPTERMETOILE OPTERMETOILE2 .
EXPR6 ->	TERM24 OPTERMETOILE .
TERM23 ->	int OPTERMETOILE OPTERMETOILE
|	caractere OPTERMETOILE OPTERMETOILE
|	true OPTERMETOILE OPTERMETOILE
|	false OPTERMETOILE OPTERMETOILE
|	null OPTERMETOILE OPTERMETOILE
|	not EXPR2 OPTERMETOILE
|	moins EXPR2 OPTERMETOILE
|	IDENT ( EXPR ) VIRGULEEXPRETOILE1 OPTERMETOILE
|	caractere val EXPR2 OPTERMETOILE
|	new IDENT OPTERMETOILE OPTERMETOILE .
TERM24 ->	int OPTERMETOILE VIRGULEEXPRETOILE2
|	caractere OPTERMETOILE VIRGULEEXPRETOILE2
|	true OPTERMETOILE VIRGULEEXPRETOILE2
|	false OPTERMETOILE VIRGULEEXPRETOILE2
|	null OPTERMETOILE VIRGULEEXPRETOILE2
|	not EXPR2 VIRGULEEXPRETOILE2
|	moins EXPR2 VIRGULEEXPRETOILE2
|	IDENT ( EXPR ) VIRGULEEXPRETOILE1 VIRGULEEXPRETOILE2
|	caractere val EXPR2 VIRGULEEXPRETOILE2
|	new IDENT OPTERMETOILE VIRGULEEXPRETOILE2 .
